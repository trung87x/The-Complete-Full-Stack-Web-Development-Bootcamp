-- ========================================
-- üß† B√ÄI H·ªåC T·ªîNG H·ª¢P: X√ÇY D·ª∞NG H·ªÜ TH·ªêNG B√ÅN H√ÄNG V·ªöI SQL ‚Äì T·ª™ C∆† B·∫¢N ƒê·∫æN N√ÇNG CAO
-- ========================================

-- ========================================
-- 1Ô∏è‚É£ T·∫†O B·∫¢NG V√Ä TH√äM D·ªÆ LI·ªÜU BAN ƒê·∫¶U
-- ========================================

CREATE TABLE customers (
    id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100)
);

CREATE TABLE categories (
    id INT PRIMARY KEY,
    name VARCHAR(50)
);

CREATE TABLE products (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10,2),
    category_id INT
);

INSERT INTO categories VALUES 
(1, 'Stationery'),
(2, 'Bags');

INSERT INTO products VALUES 
(1, 'Pen', 1.20, 1),
(2, 'Notebook', 2.50, 1),
(3, 'Backpack', 25.00, 2);

INSERT INTO customers VALUES 
(1, 'Trung', 'Dinh', 'trung@example.com'),
(2, 'Phuc', 'Bui', 'phuc@example.com');

-- ========================================
-- 2Ô∏è‚É£ ƒê·ªåC V√Ä L·ªåC D·ªÆ LI·ªÜU V·ªöI SELECT & WHERE
-- ========================================

SELECT * FROM customers;

SELECT * FROM products WHERE price < 5.00;

SELECT * FROM customers WHERE first_name = 'Trung';

SELECT * FROM products WHERE category_id = 1;

-- ========================================
-- 3Ô∏è‚É£ C·∫¨P NH·∫¨T V√Ä CH·ªàNH S·ª¨A B·∫¢NG
-- ========================================

ALTER TABLE customers ADD phone VARCHAR(15);

UPDATE customers
SET phone = '0987654321'
WHERE id = 1;

UPDATE products
SET price = 20.00
WHERE name = 'Backpack';

-- ========================================
-- 4Ô∏è‚É£ X√ìA D·ªÆ LI·ªÜU KH√îNG C·∫¶N THI·∫æT
-- ========================================

DELETE FROM customers WHERE id = 2;

DELETE FROM products WHERE price > 20;

-- ========================================
-- 5Ô∏è‚É£ T·∫†O QUAN H·ªÜ ‚Äì FOREIGN KEY & INNER JOIN
-- ========================================

CREATE TABLE orders (
    id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

CREATE TABLE order_items (
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

INSERT INTO orders VALUES 
(1, 1, '2024-07-01'),
(2, 1, '2024-07-02');

INSERT INTO order_items VALUES
(1, 1, 2),
(1, 2, 1),
(2, 3, 1);

SELECT 
    c.first_name,
    c.last_name,
    p.name AS product_name,
    oi.quantity
FROM orders o
JOIN customers c ON o.customer_id = c.id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id;

-- ========================================
-- 6Ô∏è‚É£ TH·ªêNG K√ä V·ªöI GROUP BY V√Ä SUM()
-- ========================================

SELECT 
    c.first_name,
    c.last_name,
    SUM(oi.quantity) AS total_items
FROM orders o
JOIN customers c ON o.customer_id = c.id
JOIN order_items oi ON o.id = oi.order_id
GROUP BY c.id, c.first_name, c.last_name;

-- ========================================
-- 7Ô∏è‚É£ LEFT JOIN ‚Äì D·ªÆ LI·ªÜU THI·∫æU
-- ========================================

SELECT 
    p.name AS product_name,
    SUM(oi.quantity) AS total_sold
FROM products p
LEFT JOIN order_items oi ON p.id = oi.product_id
GROUP BY p.id, p.name;

-- ========================================
-- 8Ô∏è‚É£ SUBQUERY ‚Äì TRUY V·∫§N L·ªíNG NHAU
-- ========================================

SELECT * FROM products
WHERE price = (
    SELECT MAX(price) FROM products
);

-- ========================================
-- 9Ô∏è‚É£ VIEW ‚Äì T·∫†O B·∫¢NG ·∫¢O ƒê·ªÇ T√ÅI S·ª¨ D·ª§NG
-- ========================================

CREATE VIEW customer_orders_summary AS
SELECT 
    c.first_name,
    c.last_name,
    o.id AS order_id,
    o.order_date,
    SUM(oi.quantity * p.price) AS total_amount
FROM orders o
JOIN customers c ON o.customer_id = c.id
JOIN order_items oi ON o.id = oi.order_id
JOIN products p ON oi.product_id = p.id
GROUP BY o.id, c.first_name, c.last_name, o.order_date;

SELECT * FROM customer_orders_summary;

-- ========================================
-- üîü INDEX ‚Äì T·ªêI ∆ØU TRUY V·∫§N
-- ========================================

CREATE INDEX idx_customers_email ON customers(email);

-- ========================================
-- üîÅ TRANSACTION ‚Äì ƒê·∫¢M B·∫¢O TO√ÄN V·∫∏N D·ªÆ LI·ªÜU
-- ========================================

BEGIN;

INSERT INTO orders (id, customer_id, order_date)
VALUES (3, 1, '2024-07-03');

INSERT INTO order_items VALUES (3, 1, 1);
INSERT INTO order_items VALUES (3, 2, 2);

COMMIT;

-- N·∫øu x·∫£y ra l·ªói, d√πng:
-- ROLLBACK;

-- ========================================
-- 1Ô∏è‚É£1Ô∏è‚É£ CASE WHEN ‚Äì LOGIC ƒêI·ªÄU KI·ªÜN
-- ========================================

-- Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m v√† ph√¢n lo·∫°i gi√°: 'R·∫ª', 'Trung b√¨nh', 'ƒê·∫Øt'
SELECT 
    name,
    price,
    CASE 
        WHEN price < 5 THEN 'R·∫ª'
        WHEN price BETWEEN 5 AND 20 THEN 'Trung b√¨nh'
        ELSE 'ƒê·∫Øt'
    END AS price_level
FROM products;

-- G·∫Øn nh√£n cho kh√°ch h√†ng theo s·ªë l∆∞·ª£ng ƒë∆°n h√†ng ƒë√£ ƒë·∫∑t
SELECT 
    c.first_name,
    c.last_name,
    COUNT(o.id) AS total_orders,
    CASE 
        WHEN COUNT(o.id) = 0 THEN 'M·ªõi'
        WHEN COUNT(o.id) <= 2 THEN 'Th∆∞·ªùng'
        ELSE 'Trung th√†nh'
    END AS customer_status
FROM customers c
LEFT JOIN orders o ON c.id = o.customer_id
GROUP BY c.id, c.first_name, c.last_name;

-- ========================================
-- 1Ô∏è‚É£2Ô∏è‚É£ DATE FUNCTIONS ‚Äì H√ÄM X·ª¨ L√ù NG√ÄY GI·ªú
-- ========================================

-- L·∫•y c√°c ƒë∆°n h√†ng trong th√°ng 7 nƒÉm 2024
SELECT * FROM orders
WHERE EXTRACT(MONTH FROM order_date) = 7
  AND EXTRACT(YEAR FROM order_date) = 2024;

-- T√≠nh s·ªë ng√†y k·ªÉ t·ª´ khi ƒë∆°n h√†ng ƒë∆∞·ª£c t·∫°o
SELECT 
    id,
    order_date,
    CURRENT_DATE - order_date AS days_ago
FROM orders;

-- Hi·ªÉn th·ªã ng√†y, th√°ng, nƒÉm ri√™ng bi·ªát
SELECT 
    id,
    EXTRACT(DAY FROM order_date) AS day,
    EXTRACT(MONTH FROM order_date) AS month,
    EXTRACT(YEAR FROM order_date) AS year
FROM orders;

-- ========================================
-- 1Ô∏è‚É£3Ô∏è‚É£ UNION, EXISTS ‚Äì T·∫¨P H·ª¢P V√Ä KI·ªÇM TRA T·ªíN T·∫†I
-- ========================================

-- UNION: L·∫•y t·∫•t c·∫£ t√™n kh√°ch h√†ng v√† t√™n s·∫£n ph·∫©m v√†o m·ªôt danh s√°ch chung (demo)
SELECT first_name AS name FROM customers
UNION
SELECT name FROM products;

-- EXISTS: Ki·ªÉm tra kh√°ch h√†ng c√≥ ƒë∆°n h√†ng kh√¥ng
SELECT 
    first_name,
    last_name
FROM customers c
WHERE EXISTS (
    SELECT 1 FROM orders o
    WHERE o.customer_id = c.id
);

-- NOT EXISTS: Kh√°ch h√†ng ch∆∞a t·ª´ng ƒë·∫∑t ƒë∆°n
SELECT 
    first_name,
    last_name
FROM customers c
WHERE NOT EXISTS (
    SELECT 1 FROM orders o
    WHERE o.customer_id = c.id
);

